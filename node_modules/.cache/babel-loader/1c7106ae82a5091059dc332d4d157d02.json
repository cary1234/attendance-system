{"ast":null,"code":"const assert = require('assert');\n\nfunction getPlaceByGeonameId(fetcher, geonameId) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assert(geonameId, 'Parameter \"geonameId\" is required');\n  const path = `/places/geoname-id/${geonameId}`;\n  const query = { ...options\n  };\n  return fetcher.get({\n    path,\n    query\n  });\n}\n\nmodule.exports = getPlaceByGeonameId;","map":{"version":3,"names":["assert","require","getPlaceByGeonameId","fetcher","geonameId","options","path","query","get","module","exports"],"sources":["C:/Users/CBondoc Desktop/Desktop/KodeGo/node_modules/spott-nodejs-sdk/src/get-place-by-geoname-id.js"],"sourcesContent":["const assert = require('assert');\n\nfunction getPlaceByGeonameId(fetcher, geonameId, options = {}) {\n  assert(geonameId, 'Parameter \"geonameId\" is required');\n\n  const path = `/places/geoname-id/${geonameId}`;\n  const query = { ...options };\n\n  return fetcher.get({\n    path,\n    query\n  });\n}\n\nmodule.exports = getPlaceByGeonameId;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,SAAtC,EAA+D;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC7DL,MAAM,CAACI,SAAD,EAAY,mCAAZ,CAAN;EAEA,MAAME,IAAI,GAAI,sBAAqBF,SAAU,EAA7C;EACA,MAAMG,KAAK,GAAG,EAAE,GAAGF;EAAL,CAAd;EAEA,OAAOF,OAAO,CAACK,GAAR,CAAY;IACjBF,IADiB;IAEjBC;EAFiB,CAAZ,CAAP;AAID;;AAEDE,MAAM,CAACC,OAAP,GAAiBR,mBAAjB"},"metadata":{},"sourceType":"script"}